{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/Bmi.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","setBmiValueProp","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","ImperialBMI","onChangeInput","e","target","prevState","height","weight","heightToMeter","bmi","Math","pow","round","inches","heightToInches","parseInt","onClick","preventDefault","Bmi","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d9aa795.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst FormInput = props => {\r\n  const {\r\n    name,\r\n    type,\r\n    title,\r\n    value,\r\n    onChange\r\n  }= props\r\n\r\n  return (\r\n    <div className='input-groups'>\r\n      <span className='label'>{title}</span>\r\n      <div className='range-container'>\r\n        <input \r\n        type={type}\r\n        name={name}\r\n        className='range-input'\r\n        value={value}\r\n        onChange={onChange}\r\n        autoComplete='false'\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nFormInput.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  type: PropTypes.oneOf(['text'])\r\n\r\n}\r\n\r\nexport default FormInput\r\n","import React, { useState, useEffect } from 'react';\r\nimport FormInput from './FormInput';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BmiCalculator = props => {\r\n  const { setBmiValueProp } = props;\r\n  const [heightUnit, setHeightUnit] = useState('cm');\r\n  const [weightUnit, setWeightUnit] = useState('kg');\r\n  const [unit, setUnit] = useState('Metric');\r\n  // const [count, setCount] = useState({\r\n  //  data:{\r\n  //       heightCount: '0',\r\n  //       inchesCount: '0',\r\n  //       weightCount: '0'\r\n  //     }\r\n  // })\r\n  const [count, setCount] = useState({\r\n    heightCount: '0',\r\n    inchesCount: '0',\r\n    weightCount: '0'\r\n  });\r\n\r\n  // const { heightCount, inchesCount, weightCount   }= count.data\r\n  const { heightCount, inchesCount, weightCount } = count;\r\n\r\n  useEffect(() => {\r\n    metricBMI(heightCount, weightCount);\r\n    ImperialBMI(heightCount, weightCount, inchesCount )\r\n    // eslint-disable-next-line\r\n  }, [heightCount, weightCount, inchesCount ]);\r\n\r\n  const onChangeInput = e => {\r\n    const { name, value } = e.target;\r\n    // const {data} = count\r\n    // setCount({\r\n    //  data:{\r\n    //    ...data,\r\n    //     [name]: value\r\n    // }\r\n    // })\r\n    setCount(prevState => ({\r\n      ...prevState,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const onSelectTag = e => {\r\n    setUnit(e.target.value);\r\n    if (e.target.value === 'Metric') {\r\n      setHeightUnit('cm');\r\n      setWeightUnit('kg');\r\n    } else {\r\n      setHeightUnit('ft');\r\n      setWeightUnit('lbs');\r\n    }\r\n  };\r\n\r\n  const metricBMI = (height, weight) => {\r\n    if (height > 0 && weight > 0) {\r\n      const heightToMeter = height / 100;\r\n      const bmi = weight / Math.pow(heightToMeter, 2);\r\n      setBmiValueProp(Math.round(bmi))\r\n    }\r\n  };\r\n  const ImperialBMI = (height, weight, inches) =>{\r\n        if (height > 0 && weight > 0 && inches > 0) {\r\n          const heightToInches = (height * 12)  + parseInt(inches)\r\n          const bmi = 703 * (weight / (heightToInches * heightToInches))\r\n          setBmiValueProp(Math.round(bmi))\r\n        }\r\n  }\r\n\r\n  const resetData = e => {\r\n    e.preventDefault();\r\n    setBmiValueProp(0)\r\n    setUnit('Metric');\r\n    setCount({\r\n      heightCount: '0',\r\n      inchesCount: '0',\r\n      weightCount: '0'\r\n    });\r\n    setHeightUnit('cm');\r\n    setWeightUnit('kg');\r\n  };\r\n  return (\r\n    <>\r\n      <div className='bmi-inpute'>\r\n        <div className='inputs-fields'>\r\n          <div>\r\n            <span className='label-unit'>Select Unit</span>\r\n            <div className='unit'>\r\n              <select\r\n                name='unit'\r\n                value={unit}\r\n                onChange={onSelectTag}\r\n                className='form-control form-control-sm'\r\n              >\r\n                <option value='Metric'>Metric</option>\r\n                <option value='Imperial'>Imperial</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <FormInput\r\n            type='text'\r\n            name='heightCount'\r\n            title={`Height (${heightUnit})`}\r\n            value={heightCount}\r\n            onChange={onChangeInput}\r\n          />\r\n          {unit === 'Imperial' ? (\r\n            <FormInput\r\n              type='text'\r\n              name='inchesCount'\r\n              title={`(inches)`}\r\n              value={inchesCount}\r\n              onChange={onChangeInput}\r\n            />\r\n          ) : (\r\n            ''\r\n          )}\r\n\r\n          <FormInput\r\n            type='text'\r\n            name='weightCount'\r\n            title={`Weight (${weightUnit})`}\r\n            value={weightCount}\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <button className='button' type='submit' onClick={resetData}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nBmiCalculator.propTypes = {\r\n  setBmiValueProp: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BmiCalculator;\r\n","import React, { useState } from 'react';\r\nimport BmiCalculator from './BmiCalculator';\r\n\r\nconst Bmi = () => {\r\n  const [bmiValue, setBmiValue] = useState(0);\r\n\r\n  const getBmiClass = bmi => {\r\n    if (bmi >= 1 && bmi <= 18.5) return 'Underweight';\r\n    if (bmi >= 18.5 && bmi <= 24.9) return 'Normal Weight';\r\n    if (bmi >= 24.9 && bmi <= 29.9) return 'Overweight';\r\n    if (bmi >= 30) return 'Obese';\r\n  };\r\n\r\n  const bmiCategory = getBmiClass(bmiValue) \r\n  let bmiClass =''\r\n  if (bmiValue > 0 && bmiCategory) {\r\n    bmiClass = bmiCategory.split(' ')[0].toLowerCase()\r\n  }\r\n\r\n  const bmiBackgroundColor = bmi =>{\r\n    if (bmi >= 1 && bmi <= 18.5) return '#fed88b';\r\n    if (bmi >= 18.5 && bmi <= 24.9) return '#80ff80';\r\n    if (bmi >= 24.9 && bmi <= 29.9) return '#ff7f50';\r\n    if (bmi >= 30) return '#ff5411';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='calculator' \r\n      style= {{\r\n        backgroundColor: bmiBackgroundColor(bmiValue)\r\n      }}\r\n      >\r\n        <h3>Body Mass Index Calculator</h3>\r\n        <div className='bmi-result-container'>\r\n          <div className='bmi-result'>\r\n            <div className='bmi-result-number'>\r\n              Body Mass Index (Bmi) = {bmiValue}\r\n            </div>\r\n            <div className={`bmi-category ${bmiClass}`}>Weight Category: {bmiCategory}</div>\r\n          </div>\r\n          <BmiCalculator setBmiValueProp={setBmiValue} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bmi;\r\n","import React from 'react';\nimport './App.css';\nimport Bmi from './components/Bmi';\n\nconst App = () => {\n  return (\n    <div className='App container'>\n      <div className='row justify-content-center'>\n        <div className='col-lg-6 col-lg-offset-3'>\n          <Bmi />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}